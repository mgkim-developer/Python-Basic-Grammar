
# 파이썬 내장 함수

# 파이썬으로 프로그래밍하기 위해 가장 기본이 되는 파이썬 문법을 대부분 공부했다.
# 물론 프로그래밍은 코딩을 잘한다고 잘 할 수 있는 것은 아니다.
# 하지만, 가장 기본이 되는 문법들이니 잘 익혀두자.

# 이번에는 파이썬 내장 함수에 대해  소개할 것이다.
# 내장 함수는 외부 모듈과 달리 import가 필요하지 않기 떄문에 아무런 설정 없이 바로 사용할 수 있다.

# 활용빈도가  높은 함수를 중심으로 알파벳 순서대로 간략히 정리했다.
# 프로그래밍을 하기 위해서 이 함수들을 당장 모두 알아야 하는 것은 아니다. 가벼운 마음으로 살펴보면 좋을 것 같다.

# abs
# all(x)는 반복 가능한(iterable) 자료형 x를 입력 인수로 받으며 이 x의 요소가 모두 참이면 True, 거짓이 하나라도 있으면 False를 돌려준다.

# ※ 반복 가능한 자료형이란 for문으로 그 값을 출력할 수 있는 것을 의미한다. 리스트, 튜플, 문자열, 딕셔너리, 집합 등이 있다.

# 다음 예를 보자.
print(all([1, 2, 3]))
# 리스트 자료형[1, 2, 3]은 모든 요소가 참이므로 True를 돌려준다.

print(all([1, 2, 3, 0]))
# 리스트 자료형 [1, 2, 3, 0] 중에서 요소 0은 거짓이므로 False를 돌려준다.

print(all([]))
# 만약 all의 입력 인수가 빈 값인 경우에는 True를 리턴한다.

# ※ 자료형의 참과 거짓에 대해 잘 기억나지 않는다면 리뷰 2-7을 다시 살펴 보길 바란다.

# any
# any(x)는 반복 가능한 (iterable) 자료형 x를 입력 인수로 받으며 이 x의 요소 중 하나라도 참이 있으면 True를 돌려주고, x가 모두 거짓일 때에만 False를 돌려준다. all(x)의 반대이다.

# 다음 예를 보자.
print(any([1, 2, 3, 0]))
#  리스트 자료형 [1, 2, 3, 0]중에서 1, 2, 3이 참이므로 True를 돌려준다.

print(any([0, ""]))
# 리스트 자료형 [0, ""]의 요소 0과 ""은 모두 거짓이므로 False를 돌려준다.

print(any([]))
# 만약 any의 입력 인수가 빈 값인 경우에는 False를 리턴한다.

# chr
# chr(i)는 유니코드(Unicode)값을 입력받아 그 코드에 해당하는 문자를 출력하는 함수이다.
# ※ 유니코드는 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 산업 표준이다.

print(chr(97))
print(chr(44032))

# dir
# dir은 객체가 자체적으로 가지고 있는 변수나 함수를 보여 준다.
# 다음 예는 리스트와 딕셔너리 객체 관련 함수(메서드)를 보여 주는 예이다. 02장에서 살펴본 자료형 관련 함수를 만나 볼 수 있다.

print(dir([1, 2, 3]))
print(dir({'1' : 'a'}))

# divmod
# divmod(a, b)는 2개의 숫자를 입력으로 받는다. 그리고 a를 b로 나눈 몫과 나머지를 튜플 형태로 돌려주는 함수이다.

print(divmod(7, 3))

# 몫을 구하는 연산자 //와 나머지를 구하는 연산자 %를 각각 사용한 결과와 비교해 보자.
print(7//3)
print(7%3)

# enumerate
# enumerate는 "열거하다"라는 뜻이다. 이 함수는 순서가 있는 자료형(리스트, 튜플, 문자열)을 입력으로 받아 인덱스 값을 포함하는 enumerate 객체를 돌려준다.

# ※ 보통 enumerate 함수는 다음 예제처럼 for문과 함께 자주 사용한다.

# 잘 이해되지 않으면 다음 예를 보자.
for i, name in enumerate(['body', 'foo', 'bar']):
    print(i, name)

# 순서 값과 함께 body, foo, bar가 순서대로 출력되었다. 즉 위 예제와 같이 enumerate를 for문과 함께 사용하면 자료형의 현재 순서(index)와 그 값을 쉽게 알 수 있다.
# for문처럼 반복되는 구간에서 객체가 현재 어느 위치에 있는지 알려 주는 인덱스 값이 필요할 때 enumerate 함수를 사용하면 매우 유용하다.

# eval
# eval(expression)은 실행 가능한 문자열(1 + 2, 'hi' + 'a' 같은 것)을 입력으로 받아 문자열을 실행한 결과값을 돌려주는 함수이다.

print(eval('1+2'))
print(eval("'hi' + 'a'"))
print(eval('divmod(4, 3)'))

# filter
# filter란 무엇인가를 걸러낸다는 뜻으로 filter 함수도 동일한 의미를 가진다.

# filter함수는 첫 번째 인수로 함수 이름을, 두 번째 인수로 그 함수에 차례로 들어갈 반복 가능한 자료형을 받는다.
# 그리고 두 번째 인수인 반복 가능한 자료형 요소가 첫 번째 인수인 함수에 입력되었을 때 반환 값이 참인 것만 묶어서(걸러 내서)돌려준다.

# 다음 예를 보자.
def positive(l):
    result = []
    for i in l:
        if i > 0:
            result.append(i)
    return result

print(positive([1, -3, 2 ,0, -5, 6]))

# 즉 위에서 만든 positive 함수는 리스트를 입력값으로 받아 각각의 요소를 판별해서 양수 값만 돌려주는 함수이다.
# filter 함수를 사용하면 위 내용을 다음과 같이 간단하게 작성할 수 있다.
def positive(x):
    return x > 0

print(list(filter(positive, [1, -3, 2, 0, -5, 6])))
# 여기에서는 두 번째 인수인 리스트의 요소들이 첫 번째 인수인 positive 함수에 입력되었을때 반환 값이 참인 것만 묶어서 돌려준다.
# 앞의 예에서는 1, 2, 6만 양수여서 x > 0  문장이 참이되므로 [1, 2, 6]이라는 결과값을 돌려주게 된 것이다.

# 앞의 함수는 lambda를 사용하면 더욱 간편하게 코드를 작성할 수 있다.
print(list(filter(lambda x: x > 0, [1, -3, 2, 0, -5, 6])))

# hex






