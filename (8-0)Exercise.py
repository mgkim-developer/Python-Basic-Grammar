
# 08장 종합문제

#-----------------------------------------------------------------------------------------------------------------------

# Q1 문자열 바꾸기
# 다음과 같은 문자열이 있다.
#
# a:b:c:d
# 문자열의 split와 join 함수를 사용하여 위 문자열을 다음과 같이 고치시오.
#
# a#b#c#d

# [Q1 풀이]
a = "a:b:c:d"
b = a.split(":")
print(b)
c = "#".join(b)
print(c)

#-----------------------------------------------------------------------------------------------------------------------

# Q2 딕셔너리 값 추출하기
# 다음은 딕셔너리의 a에서 'C'라는 key에 해당하는 value를 출력하는 프로그램이다.
#
# >>> a = {'A':90, 'B':80}
# >>> a['C']
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# KeyError: 'C'
# a 딕셔너리에는 'C'라는 key가 없으므로 위와 같은 오류가 발생한다. 'C'에 해당하는 key 값이 없을 경우 오류 대신 70을 얻을 수 있도록 수정하시오.

# [Q2 풀이]
a = {'A':90, 'B':80}
print(a.get('C', 70)) #딕셔너리의 get 함수를 사용하면 key가 없을 경우에는 두 번째 매개변수로 전달된 default 값을 대신 도려준다.

#-----------------------------------------------------------------------------------------------------------------------

# Q3 리스트의 더하기와 extend 함수
# 다음과 같은 리스트 a가 있다.
#
# >>> a = [1, 2, 3]
# 리스트 a에 [4, 5]를 + 기호를 사용하여 더한 결과는 다음과 같다.
#
# >>> a = [1, 2, 3]
# >>> a = a + [4,5]
# >>> a
# [1, 2, 3, 4, 5]
# 리스트 a에 [4,5]를 extend를 사용하여 더한 결과는 다음과 같다.
#
# >>> a = [1, 2, 3]
# >>> a.extend([4, 5])
# >>> a
# [1, 2, 3, 4, 5]
# + 기호를 사용하여 더한 것과 extend한 것의 차이점이 있을까? 있다면 그 차이점을 설명하시오.

# [Q3 풀이]
# 리스트 a에 +기호를 사용하는 경우에 대해서 먼저 살펴보자.
a = [1, 2, 3]
print(id(a))
# id 함수는 입력을 받은 리스트 a의 주소 값을 돌려준다.
# 현재 a라는 리스트는 2267994099072 이라는 주소에 저장되어 있다.
a = a + [4, 5]
print(a)
# 리스트 a에 +기호를 사용하여 [4, 5]라는 리스트를 더해 보았다.
# 그리고 다시 다음과 같이 리스트 a의 주소 값을 확인해 보자.
print(id(a))
# 이전에 리스트 a가 저장되어 있던 주소와 다른 값을 돌려주는 것을 확인할 수 있다.
# 주소 값이 다르기 때문에 +를 사용하면 리스트 a의 값이 변하는 것이 아니라 두 리스트가 더해진 새로운 리스트가 반환된다는 것을 확인할 수 있다.

# 이번에는 extend 함수를 사용해 보자.
a = [1, 2, 3]
print(id(a))
# 리스트 a를 생성하고 그 주소 값을 출력해 보았다.
a.extend([4, 5])
print(a)
# 그리고 리스트 a에 extend를 사용하여 [4, 5]라는 리스트를 더해 주었다.
# 그리고 다시 다음과 같이 리스트 a의 주소 값을 확인해 보도록 하자.
print(id(a))
# + 기호를 사용하여 더한 경우와는 달리 주소 값이 변하지 않고 그대로 유지되는 것을 확인할 수 있다.

#-----------------------------------------------------------------------------------------------------------------------

