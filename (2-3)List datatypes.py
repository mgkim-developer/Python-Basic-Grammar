# 리스트는 어떻게 만들고 사용할까?
# 리스트를 사용하면 1, 3, 5, 7, 9 숫자 모음을 다음과 같이 간단하게 표현할 수 있다.
odd = [1 , 3, 5, 7 ,9]
# 리스트를 만들 때는 위에서 보는 것과 같이 대괄호([ ])로 감싸 주고 각 요솟값은 쉼표(,)로 구분해 준다.
# 리스트명 = [요소1, 요소2, 요소3, ...]
# 여러 가지 리스트의 생김새를 살펴보면 다음과 같다.
a = []
b = [1, 2, 3]
c = ['Life', 'is', 'too', 'short']
d = [1, 2, 'Life', 'is']
e = [1, 2, ['Life', 'is']]
# 리스트는 a처럼 아무것도 포함하지 않아 비어 있는 리스트([])일 수도 있고 b처럼 숫자를 요솟값으로 가질 수도 있고 c처럼 문자열을 요솟값으로 가질 수도 있다.
# 또한 d처럼 숫자와 문자열을 함께 요솟값으로 가질 수도 있으며 e처럼 리스트 자체를 요솟값으로 가질 수도 있다. 즉 리스트 안에는 어떠한 자료형도 포함시킬 수 있다.

# ※비어 있는 리스트는 a = list()로 생성할 수도 있다.

# 리스트의 인덱싱과 슬라이싱
# 리스트도 문자열처럼 인덱싱과 슬라이싱이 가능하다. 백문이 불여일견, 말로 설명하는 것보다 직접 예를 실행해 보면서 리스트의 기본 구조를 이해하는 것이 쉽다.

# 리스트의 인덱싱
# 리스트 역시 문자열처럼 인덱싱을 적용할 수 있다. 먼저 a 변수에 [1, 2, 3]값을 설정한다.
a = [1, 2, 3]
print(a)

# a[0]은 리스트 a의 첫 번째 요솟값을 말한다.
print(a[0])

# 다음 예는 리스트의 첫 번째 요소인 a[0]과 세 번째 요소인 a[2]의 값을 더한 것이다.
print(a[0] + a[2])
# 이것은 1 + 3으로 해석되어 값 4를 출력한다.

# 문자열을 공부할 때 이미 살펴보았지만 파이썬은 숫자를 0부터 세기 때문에 a[1]이 리스트 a의 첫 번쨰 요소가 아니라 a[0]이 리스트 a의 첫 번째 요소임을 명심하자.
# a[-1]은 문자열에서와 마찬가지로 리스트 a의 마지막 요솟값을 말한다.
print(a[-1])

# 이번에는 다음 예처럼 리스트 a를 숫자 1, 2, 3과 또 다른 리스트인 ['a', 'b', 'c']를 포함하도록 만들어 보자.
a = [1, 2, 3, ['a', 'b', 'c']]
# 다음 예를 따라 해 보자.
print(a[0])
print(a[-1])
print(a[3])
# 예상한 대로 a[-1]은 마지막 요솟값 ['a', 'b', 'c']를 나타낸다. a[3]은 리스트 a의 네 번째 요소를 나타내기 때문에 마지막 요소를 나타내는 a[-1]과 동일한 결과값을 보여 준다.

# 그렇다면 여기에서 리스트 a에 포함된 ['a', 'b', 'c']리스트에서 'a' 값을 인덱싱을 사용해 끄집어낼 수 있는 방법은 없을까? 다음 예를 보자.
print(a[-1][0])
# 위와 같이 하면 'a를 끄집어낼 수 있다. a[-1]이 ['a', 'b', 'c']리스트라는 것은 이미 말했다. 바로 이 리스트에서 첫 번째 요소를 불러오기 위해 [0]을 붙여 준 것이다.

# 다음 예도 마찬가지 경우이므로 어렵지 않게 이해될 것이다.
print(a[-1][1])
print(a[-1][2])

# [삼중 리스트에서 인덱싱하기]
a = [1, 2, ['a', 'b', ['Life', 'is']]]
# 리스트 a 안에 ['a', 'b', ['Life', 'is']] 리스트가 포함되어 있고, 그 리스트 안에 다시 ['Life', 'is']리스트가 포함되어 있다. 삼중 구조의 리스트 이다.

# 이 경우 'Life' 문자열만 끄집어내려면 다음과 같이 해야한다.
print(a[2][2][0])
# 위 예는 리스트a의 세 번째 요소인 리스트 ['a', 'b', ['Life', 'is']]에서 세 번째 요소인 리스트 ['Life', 'is']의 첫 번째 요소를 나타낸다.

# 리스트의 슬라이싱
# 문자열과 마찬가지로 포스트에서도 슬라이싱 기법을 적용할 수 있다. 슬라이싱은 '나눈다'는 뜻이라고 했다.
a = [1, 2, 3, 4, 5]
print(a[0:2])

# 앞의 예를 문자열에서 슬라이싱 했던 것과 비교해 보자.
a = "12345"
print(a[0:2])
# 2가지가 완전히 동일하게 사용되었음을 눈치챘을 것이다. 문자열에서 했던 것과 사용법이 완전히 동일하다.

# 몇 가지 예를 더 들어 보자.
a = [1, 2, 3, 4, 5,]
b = a[:2]
c = a[2:]
print(b)
print(c)
# b 변수는 리스트 a의 첫 번째 요소부터 두 번째 요소인 a[1]까지 나타내는 리스트이다. 물론 a[2]값인 3은 포함되지 않는다.
# c라는 변수는 리스트  a의 세 번째 요소부터 끝까지 나타내는 리스트이다.

# [중첩된 리스트에서 슬라이싱하기]
# 리스트가 포함된 중첩 리스트 역시 슬라이싱 방법은 똑같이 적용된다.
a = [1, 2, 3, ['a', 'b', 'c'], 4, 5]
print(a[2:5])
print(a[3][:2])
# 위 예에서 a[3]은 ['a', 'b', 'c']를 나타낸다. 따라서 a[3][:2]는 ['a', 'b', 'c']의 첫 번째 요소부터 세 번째 요소 직전 까지의 값, 즉['a', 'b']를 나타내는 리스트가 된다.

# 리스트 연산하기
# 리스트 역시 + 기호를 사용해서 더할 수 있고 * 기호를 사용해서 반복할 수 있다. 문자열과 마찬가지로 리스트에서도 되는지 직접 확인해 보자.

# 리스트 더하기(+)
a = [1, 2, 3]
b = [4, 5, 6]
print(a + b)
#  리스트 사이에서 + 기호는 2개의 리스트를 합치는 기능을 한다.
# 문자열에서 "abc" + "def" = "abcdef"가 되는 것과 같은 이치이다.

# 리스트 반복하기(*)
a = [1, 2, 3]
print(a*3)
# 위에서 볼 수 있듯이 [1, 2, 3]리스트가 세 번 반복되어 새로운 리스트를 만들어낸다. 문자열에서 "abc"*3 = "abcabcabc" 가 되는 것과 같은 이치이다.

# 리스트 길이구하기
# 리스트 길이를 구하기 위해서는 다음처럼 len 함수를 사용해야 한다.



